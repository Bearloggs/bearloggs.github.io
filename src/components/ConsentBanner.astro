---
---

<div id="consent-banner" class="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 shadow-lg p-4 z-50 transform translate-y-full transition-transform duration-300 ease-in-out">
  <div class="max-w-6xl mx-auto flex flex-col md:flex-row items-center justify-between gap-4">
    <div class="flex-1">
      <h3 class="text-lg font-semibold mb-2">Cookie Consent</h3>
      <p class="text-sm text-gray-600 dark:text-gray-400">
        This website uses cookies to enhance your browsing experience and analyze site traffic. 
        By clicking "Accept", you consent to our use of cookies.
      </p>
    </div>
    <div class="flex gap-3">
      <button 
        id="reject-cookies" 
        class="px-4 py-2 bg-gray-200 dark:bg-gray-700 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
      >
        Reject
      </button>
      <button 
        id="accept-cookies" 
        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
      >
        Accept
      </button>
    </div>
  </div>
</div>

<script>
  class ConsentManager {
    private banner: HTMLElement | null;
    private acceptButton: HTMLElement | null;
    private rejectButton: HTMLElement | null;
    private consentKey = 'analytics-consent';
    private consentExpiry = 180; // days

    constructor() {
      this.banner = document.getElementById('consent-banner');
      this.acceptButton = document.getElementById('accept-cookies');
      this.rejectButton = document.getElementById('reject-cookies');
      
      this.init();
    }

    private init(): void {
      // Check if user has already made a choice
      const consentStatus = this.getConsentStatus();
      
      if (consentStatus === null) {
        // No decision yet, show the banner
        this.showBanner();
      } else if (consentStatus === true) {
        // User accepted, initialize analytics
        this.initializeAnalytics();
      }

      // Add event listeners
      this.acceptButton?.addEventListener('click', () => this.handleAccept());
      this.rejectButton?.addEventListener('click', () => this.handleReject());
    }

    private showBanner(): void {
      setTimeout(() => {
        this.banner?.classList.remove('translate-y-full');
      }, 1000);
    }

    private hideBanner(): void {
      this.banner?.classList.add('translate-y-full');
    }

    private handleAccept(): void {
      this.setConsentStatus(true);
      this.hideBanner();
      this.initializeAnalytics();
    }

    private handleReject(): void {
      this.setConsentStatus(false);
      this.hideBanner();
    }

    private getConsentStatus(): boolean | null {
      const consent = localStorage.getItem(this.consentKey);
      if (consent === null) return null;
      
      try {
        const { value, expires } = JSON.parse(consent);
        
        // Check if consent has expired
        if (new Date() > new Date(expires)) {
          localStorage.removeItem(this.consentKey);
          return null;
        }
        
        return value;
      } catch (e) {
        localStorage.removeItem(this.consentKey);
        return null;
      }
    }

    private setConsentStatus(value: boolean): void {
      // Set expiration date
      const expires = new Date();
      expires.setDate(expires.getDate() + this.consentExpiry);
      
      localStorage.setItem(
        this.consentKey,
        JSON.stringify({ value, expires: expires.toISOString() })
      );
    }

    private initializeAnalytics(): void {
      // This function will be called when consent is given
      try {
        // Use a safer way to check for gtag
        const win = window as any;
        if (typeof win.gtag === 'function') {
          win.gtag('consent', 'update', {
            'analytics_storage': 'granted'
          });
        }
      } catch (error) {
        console.error('Error updating consent:', error);
      }
    }
  }

  // Initialize the consent manager when DOM is fully loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ConsentManager();
    });
  } else {
    new ConsentManager();
  }

  // Re-initialize after view transitions
  document.addEventListener('astro:after-swap', () => {
    new ConsentManager();
  });
</script>