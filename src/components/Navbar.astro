---
interface NavItem {
  href: string;
  text: string;
}

interface FeaturedTag {
  tag: string;
  label: string;
}

const navItems: NavItem[] = [
  { href: '/posts', text: 'Posts' },
  { href: '/about', text: 'About' },
];

const featuredTags: FeaturedTag[] = [
  { tag: 'devsecops', label: 'DevSecOps' },
  { tag: 'forensics', label: 'Forensics' },
  { tag: 'machine-learning', label: 'Machine Learning' },
];
---

<nav class="bg-white dark:bg-gray-800 shadow-sm fixed w-full top-0 z-50" role="navigation" aria-label="Main navigation">
  <div class="max-w-6xl mx-auto px-4">
    <div class="flex justify-between h-16">
      <div class="flex items-center">
        <div class="flex-shrink-0 flex items-center">
          <a href="/" class="text-xl font-bold" aria-label="Home">HacknWatch</a>
        </div>
        <!-- Desktop Menu -->
        <div class="hidden md:ml-6 md:flex md:space-x-4" role="menubar">
          {navItems.map(item => (
            <a
              href={item.href}
              class="inline-flex items-center px-3 py-2 text-sm font-medium text-gray-900 dark:text-gray-100 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
              role="menuitem"
            >
              {item.text}
            </a>
          ))}
          <div class="border-l border-gray-200 dark:border-gray-700 mx-2" aria-hidden="true"></div>
          {featuredTags.map(({ tag, label }) => (
            <a
              href={`/tags/${tag}`}
              class="inline-flex items-center px-3 py-2 text-sm font-medium text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
              role="menuitem"
            >
              #{label}
            </a>
          ))}
        </div>
      </div>
      
      <div class="flex items-center space-x-4">
        <button
          id="theme-toggle"
          class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700"
          aria-label="Toggle theme"
          aria-expanded="false"
        >
          <svg
            id="theme-toggle-dark-icon"
            class="hidden w-5 h-5"
            fill="currentColor"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
            aria-hidden="true"
          >
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
          </svg>
          <svg
            id="theme-toggle-light-icon"
            class="hidden w-5 h-5"
            fill="currentColor"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
            aria-hidden="true"
          >
            <path
              d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
            ></path>
          </svg>
        </button>

        <!-- Mobile menu button -->
        <button
          type="button"
          id="mobile-menu-button"
          class="md:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500"
          aria-controls="mobile-menu"
          aria-expanded="false"
          aria-label="Toggle mobile menu"
        >
          <span class="sr-only">Open main menu</span>
          <!-- Hamburger icon -->
          <svg
            id="hamburger-icon"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"
            />
          </svg>
          <!-- Close icon -->
          <svg
            id="close-icon"
            class="hidden h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div 
    id="mobile-menu" 
    class="hidden md:hidden bg-white dark:bg-gray-800 shadow-lg"
    role="menu"
    aria-labelledby="mobile-menu-button"
  >
    <div class="px-2 pt-2 pb-3 space-y-1">
      {navItems.map(item => (
        <a
          href={item.href}
          class="block px-3 py-2 rounded-md text-base font-medium text-gray-900 dark:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700"
          role="menuitem"
        >
          {item.text}
        </a>
      ))}
      <div class="border-t border-gray-200 dark:border-gray-700 my-2" aria-hidden="true"></div>
      {featuredTags.map(({ tag, label }) => (
        <a
          href={`/tags/${tag}`}
          class="block px-3 py-2 rounded-md text-base font-medium text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"
          role="menuitem"
        >
          #{label}
        </a>
      ))}
    </div>
  </div>
</nav>

<div class="h-16"></div>

<script>
  // Global instances to track
  let mobileMenuInstance: MobileMenu | null = null;
  let themeToggleInstance: ThemeToggle | null = null;

  interface MobileMenuElements {
    button: HTMLElement | null;
    menu: HTMLElement | null;
    hamburgerIcon: HTMLElement | null;
    closeIcon: HTMLElement | null;
  }

  class MobileMenu {
    private elements: MobileMenuElements;
    private isMenuOpen: boolean;
    private documentClickHandler: (event: MouseEvent) => void;

    constructor() {
      this.elements = {
        button: document.getElementById('mobile-menu-button'),
        menu: document.getElementById('mobile-menu'),
        hamburgerIcon: document.getElementById('hamburger-icon'),
        closeIcon: document.getElementById('close-icon'),
      };
      this.isMenuOpen = false;
      this.documentClickHandler = this.handleDocumentClick.bind(this);
      this.initialize();
    }

    private initialize(): void {
      if (!this.elements.button || !this.elements.menu) return;
      
      this.elements.button.addEventListener('click', (e) => this.toggleMenu(e));
      document.addEventListener('click', this.documentClickHandler);
      this.elements.menu.addEventListener('click', (e) => e.stopPropagation());
    }

    private toggleMenu(event?: Event): void {
      if (event) {
        event.stopPropagation();
      }
      this.isMenuOpen = !this.isMenuOpen;
      this.elements.menu?.classList.toggle('hidden');
      this.elements.hamburgerIcon?.classList.toggle('hidden');
      this.elements.closeIcon?.classList.toggle('hidden');
      this.elements.button?.setAttribute('aria-expanded', this.isMenuOpen.toString());
    }

    private handleDocumentClick(event: MouseEvent): void {
      const target = event.target as HTMLElement;
      if (
        this.isMenuOpen &&
        !target.closest('#mobile-menu') &&
        !target.closest('#mobile-menu-button')
      ) {
        this.toggleMenu();
      }
    }

    public cleanup(): void {
      if (!this.elements.button) return;
      
      this.elements.button.removeEventListener('click', (e) => this.toggleMenu(e));
      document.removeEventListener('click', this.documentClickHandler);
    }
  }

  interface ThemeElements {
    toggle: HTMLElement | null;
    darkIcon: HTMLElement | null;
    lightIcon: HTMLElement | null;
  }

  class ThemeToggle {
    private elements: ThemeElements;
    private prefersDark: boolean;
    private mediaQuery: MediaQueryList;

    constructor() {
      this.elements = {
        toggle: document.getElementById('theme-toggle'),
        darkIcon: document.getElementById('theme-toggle-dark-icon'),
        lightIcon: document.getElementById('theme-toggle-light-icon'),
      };
      this.mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      this.prefersDark = this.mediaQuery.matches;
      this.initialize();
    }

    private initialize(): void {
      if (!this.elements.toggle) return;
      this.updateTheme();
      this.elements.toggle.addEventListener('click', () => this.toggleTheme());
      this.mediaQuery.addEventListener('change', (e) => {
        this.prefersDark = e.matches;
        this.updateTheme();
      });
    }

    private updateTheme(): void {
      const isDark = localStorage.getItem('theme') === 'dark' || 
        (!localStorage.getItem('theme') && this.prefersDark);
      document.documentElement.classList.toggle('dark', isDark);
      this.updateIcons(isDark);
      this.elements.toggle?.setAttribute('aria-expanded', isDark.toString());
    }

    private updateIcons(isDark: boolean): void {
      this.elements.darkIcon?.classList.toggle('hidden', isDark);
      this.elements.lightIcon?.classList.toggle('hidden', !isDark);
    }

    private toggleTheme(): void {
      const isDark = document.documentElement.classList.toggle('dark');
      this.updateIcons(isDark);
      this.elements.toggle?.setAttribute('aria-expanded', isDark.toString());
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    }
  }

  function initializeComponents() {
    if (mobileMenuInstance) {
      mobileMenuInstance.cleanup();
      mobileMenuInstance = null;
    }
    mobileMenuInstance = new MobileMenu();
    themeToggleInstance = new ThemeToggle();
  }

  initializeComponents();
  document.addEventListener('astro:after-swap', initializeComponents);
  window.addEventListener('unload', () => {
    if (mobileMenuInstance) {
      mobileMenuInstance.cleanup();
    }
  });
</script>